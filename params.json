{"name":"Squt","tagline":"It's like SQL, but cUTe","body":"## squt (it's like SQL, but cUTe)\r\n\r\nsqut is a Perl and PHP/JS library aiming at graphically representing (My)SQL queries in a graph form.\r\n\r\n![squt example](https://github.com/ducksmanager/squt/tree/master/front-end/images/squt_example.png)\r\n\r\nsqut uses :\r\n* Philip Stoev's [MyParse](http://search.cpan.org/~philips/DBIx-MyParse/) to parse MySQL queries\r\n* Mike Bostock's [d3](https://github.com/mbostock/d3.git) to handle the graph representation.\r\n* Marijn Haverbeke's [CodeMirror](https://github.com/marijnh/CodeMirror) for the in-browser code editor\r\n* Kevin Lindsey's [js-intersections](https://github.com/thelonious/js-intersections.git) for geometrical intersection calculations.\r\n* jQuery's [qunit](https://github.com/jquery/qunit.git) and [qunit-reporter-junit](https://github.com/jquery/qunit-reporter-junit.git) along with PrettyCode's [Object.identical.js](https://github.com/prettycode/Object.identical.js.git) for testing purposes\r\n\r\nAll of them are integrated into squt as submodules : no need to install them manually.\r\n\r\n\r\nWant to know more and install it ? Have a look at the [Installation guide](../../wiki/Installation Guide) !\r\n\r\nWant some intel about how that system works ? Head over to the [How it works](../../wiki/How-it-works) page.\r\n\r\n... Or play with the online [demo](http://62.210.239.25//squt/master/front-end/squt.html) :-)\r\n\r\n<img alt=\"Licence Creative Commons\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by-sa/3.0/fr/88x31.png\" />\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}